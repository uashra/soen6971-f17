# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  config.vm.define :scilinux6 do |t|
  end

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "scilinux6"
  config.vm.box_url = "packer_scientific-6.5-x86_64-virtualbox_virtualbox.box"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL
    yum update -y
    yum install -y wget gcc-c++ cmake gcc-gfortran zlib-devel bzip2 bzip2-devel \
                    readline-devel sqlite sqlite-devel openssl-devel xz xz-devel \
                    xterm tcl tcl-devel tk tk-devel xcb-util-devel qt qt-devel \
                    m4 zip git mercurial scl-utils openmotif-devel
    yum -y groupinstall "X Window System" "Desktop" "Fonts" "General Purpose Desktop"

    # http://linux.web.cern.ch/linux/devtoolset/
    pushd /etc/yum.repos.d/
    wget -O /etc/yum.repos.d/slc6-devtoolset.repo http://linuxsoft.cern.ch/cern/devtoolset/slc6-devtoolset.repo
    popd
    yum update
    yum install -y devtoolset-1.1
    source scl_source enable devtoolset-1.1

    mkdir coin3d
    pushd coin3d

    hg clone https://bitbucket.org/Coin3D/simage
    pushd simage
    ./configure && make -j2 && make install
    popd

    hg clone https://bitbucket.org/Coin3D/boost-header-libs-full
    hg clone https://bitbucket.org/Coin3D/generalmsvcgeneration
    hg clone -U https://bitbucket.org/Coin3D/coin
    pushd coin
    hg_hash=$(hg log -l 1 | head -n 1 | grep -oP ':[^:]+' | tail -n 1 | grep -oP '[^:]+')
    hg revert --all --rev CMake --exclude build/general --exclude include/boost
    popd
    ln -s `pwd`/generalmsvcgeneration `pwd`/coin/build/general
    ln -s `pwd`/boost-header-libs-full `pwd`/coin/include/boost
    pushd coin
    ./configure --enable-3ds-import && make -j2 && make install
    popd
    mkdir coin_build
    pushd coin_build
    cmake ../coin && make -j2 && make install
    popd

    # because we only installed 64bit libraries
    mv -f /usr/local/lib/libCoin.so /usr/local/lib/libCoin.so.old
    mv -f /usr/local/lib/libCoin.so.80 /usr/local/lib/libCoin.so.80.old
    mv -f /usr/local/lib/libCoin.so.80.0.0 /usr/local/lib/libCoin.so.80.0.0.old
    cp -f /usr/local/lib64/libCoin.so /usr/local/lib/
    cp -f /usr/local/lib64/libCoin.so.4.0.0 /usr/local/lib/

    hg clone https://bitbucket.org/Coin3D/soanydata
    hg clone https://bitbucket.org/Coin3D/sogui
    hg clone -U https://bitbucket.org/Coin3D/soqt
    pushd soqt
    hg_hash=$(hg log -l 1 | head -n 1 | grep -oP ':[^:]+' | tail -n 1 | grep -oP '[^:]+')
    hg revert --all --rev $hg_hash --exclude build/general --exclude data --exclude src/Inventor/Qt/common
    popd
    ln -s `pwd`/sogui `pwd`/soqt/src/Inventor/Qt/common
    pushd soqt
    ./configure && make -j2 && make install
    popd

    popd
  SHELL

  config.vm.provision "shell", privileged: false, inline: <<-SHELL
    source scl_source enable devtoolset-1.1
    export LD_LIBRARY_PATH=/usr/local/lib:/usr/local/lib64

    echo "source scl_source enable devtoolset-1.1" >> "$HOME/.bashrc"
    echo "export LD_LIBRARY_PATH=/usr/local/lib:/usr/local/lib64" >> "$HOME/.bashrc"

    git clone https://github.com/pyenv/pyenv.git "$HOME/.pyenv"
    echo "" >> "$HOME/.bashrc"     # just need a new line
    echo 'export PYENV_ROOT="$HOME/.pyenv"' >> "$HOME/.bashrc"
    echo 'export PATH="$PYENV_ROOT/bin:$PATH"' >> "$HOME/.bashrc"
    echo -e 'if command -v pyenv 1>/dev/null 2>&1; then\n  eval "$(pyenv init -)"\nfi' >> "$HOME/.bashrc"
    export PYENV_ROOT="$HOME/.pyenv"
    export PATH="$PYENV_ROOT/bin:$PATH"
    eval "$(pyenv init -)"
    pyenv install 2.7.14
    pyenv global 2.7.14

    pip install --user numpy scipy matplotlib ipython jupyter pandas sympy nose

    wget -O auto07p.tar.gz https://sourceforge.net/projects/auto-07p/files/latest/download?source=files
    tar -xzvf auto07p.tar.gz
    cd auto/07p
    ./configure --enable-gui && make -j2 && make clean
    echo ". $PWD/cmds/auto.env.sh" >> "$HOME/.bashrc"
    exec "$SHELL"
  SHELL
end
